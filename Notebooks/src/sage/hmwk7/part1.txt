							________________

								  BSU

							 Justin Johnson
							________________


Table of Contents
_________________




Justin Johnson 113088974 Math307

Before the deadline was changed, I tried to write my own crt() method.
Doing so wasn't too difficult, but seemed more work than normal for
assignments given in this class. On Nov 1, 2018 we covered the CRT
method in class and showed the sage code in class. From that session I
got the following results

,----
| 179702189046065030137840983877506282733808216772222487872385030013418159775151368010537808270369776111280249922696184622250812210618422156974500421843302635815511055022781078203555271102862470424542573876078160729973527171345068730365265430297970391004390643094550260335823552446001
| 'Next hack DigiCrime'
`----


To get to that point, I reviewed "Common Encryption Exponent Attack". I
saw that this 'company' had written the SAME message to DIFFERENT
employees using the same encryption exponent. Because of this case, we
can invoke the CRT (Chinese Remainder Theorem) to discover the original
message.

There are a few things that are important to remember:

E_1=M^e mod n_1 (Alice) E_2=M^e mod n_2 (Bob)

Using CRT we can solve E_1=M^e mod n_1 E_2=M^e mod n_2 for M.

M is the unique solution of E_1=M^e mod n_1 E_2=M^e mod n_2 modulo n1*n2
   M mod n1*n2 = M because M <n1,n2

*CHINESE REMAINDER THEOREM (CRT)* let n1, n2, ... , nk be natural
numbers such that for i,j distinct incices one has gcd(ni,nj)=1

then the system of linear congruences has a solution which is unique
	modulo: N=n1*n2*..*nk

Solution: x=b1*N1*x1 + b2*N2*x2+...+bk*Nk*xk mod N where Ni=N/ni and
xi=(1/Ni) mod ni

I had implemented the above separately, but in class we were introduced
to the sage method 'crt()' which is a cleaner implementation. My method
than follows

crt(list_of_ciphertext, list_of_modulii) calculates x=b1*n1*x1 + ... +
bk*nk*xk this gives us some number, and the eth_root of that number
should give us the message, according to my notes above. The issue was
the encrypted messages need to one-to-one correlate with their modulii,
and that correlation was unkown.

We were reminded that the modulus is akin to a box, and the encryption
akin to a message (which it is). The message cannot be bigger than the
box. using that idea I was able to properly sort the messages in proper
order. After some guess and check I came up with:
,----
| 179702189046065030137840983877506282733808216772222487872385030013418159775151368010537808270369776111280249922696184622250812210618422156974500421843302635815511055022781078203555271102862470424542573876078160729973527171345068730365265430297970391004390643094550260335823552446001
| 'Next hack DigiCrime'
`----
